diff --git a/http2/transport.go b/http2/transport.go
index f2c166b..0d238f2 100644
--- a/http2/transport.go
+++ b/http2/transport.go
@@ -185,6 +185,11 @@ type Transport struct {
 	connPoolOrDef ClientConnPool // non-nil version of ConnPool
 
 	*transportTestHooks
+
+	CustomInitialSettings          func([]Setting) []Setting
+	CustomInitialTransportConnFlow func(uint32) uint32
+	CustomFirstHeadersFrameParam   func(HeadersFrameParam) HeadersFrameParam
+	CustomHeaders                  func(http.Header) http.Header
 }
 
 // Hook points used for testing.
@@ -893,9 +898,16 @@ func (t *Transport) newClientConn(c net.Conn, singleUse bool) (*ClientConn, erro
 		initialSettings = append(initialSettings, Setting{ID: SettingHeaderTableSize, Val: maxHeaderTableSize})
 	}
 
+	if t.CustomInitialSettings != nil {
+		initialSettings = t.CustomInitialSettings(initialSettings)
+	}
 	cc.bw.Write(clientPreface)
 	cc.fr.WriteSettings(initialSettings...)
-	cc.fr.WriteWindowUpdate(0, uint32(conf.MaxUploadBufferPerConnection))
+	if t.CustomInitialTransportConnFlow != nil {
+		cc.fr.WriteWindowUpdate(0, t.CustomInitialTransportConnFlow(transportDefaultConnFlow))
+	} else {
+		cc.fr.WriteWindowUpdate(0, transportDefaultConnFlow)
+	}
 	cc.inflow.init(conf.MaxUploadBufferPerConnection + initialWindowSize)
 	cc.bw.Flush()
 	if cc.werr != nil {
@@ -1759,12 +1771,21 @@ func (cc *ClientConn) writeHeaders(streamID uint32, endStream bool, maxFrameSize
 		hdrs = hdrs[len(chunk):]
 		endHeaders := len(hdrs) == 0
 		if first {
-			cc.fr.WriteHeaders(HeadersFrameParam{
-				StreamID:      streamID,
-				BlockFragment: chunk,
-				EndStream:     endStream,
-				EndHeaders:    endHeaders,
-			})
+			if cc.t.CustomFirstHeadersFrameParam != nil {
+				cc.fr.WriteHeaders(cc.t.CustomFirstHeadersFrameParam(HeadersFrameParam{
+					StreamID:      streamID,
+					BlockFragment: chunk,
+					EndStream:     endStream,
+					EndHeaders:    endHeaders,
+				}))
+			} else {
+				cc.fr.WriteHeaders(HeadersFrameParam{
+					StreamID:      streamID,
+					BlockFragment: chunk,
+					EndStream:     endStream,
+					EndHeaders:    endHeaders,
+				})
+			}
 			first = false
 		} else {
 			cc.fr.WriteContinuation(streamID, endHeaders, chunk)
@@ -2009,8 +2030,11 @@ func (cc *ClientConn) encodeTrailers(trailer http.Header) ([]byte, error) {
 	cc.hbuf.Reset()
 
 	hlSize := uint64(0)
+	var headers = http.Header{}
 	for k, vv := range trailer {
+		headers[k] = []string{}
 		for _, v := range vv {
+			headers.Add(k, v)
 			hf := hpack.HeaderField{Name: k, Value: v}
 			hlSize += uint64(hf.Size())
 		}
@@ -2019,7 +2043,10 @@ func (cc *ClientConn) encodeTrailers(trailer http.Header) ([]byte, error) {
 		return nil, errRequestHeaderListSize
 	}
 
-	for k, vv := range trailer {
+	if cc.t.CustomHeaders != nil {
+		headers = cc.t.CustomHeaders(headers)
+	}
+	for k, vv := range headers {
 		lowKey, ascii := httpcommon.LowerHeader(k)
 		if !ascii {
 			// Skip writing invalid headers. Per RFC 7540, Section 8.1.2, header
