diff --git a/http2/transport.go b/http2/transport.go
index 30f706e..c941c19 100644
--- a/http2/transport.go
+++ b/http2/transport.go
@@ -181,6 +181,11 @@ type Transport struct {
 
 	connPoolOnce  sync.Once
 	connPoolOrDef ClientConnPool // non-nil version of ConnPool
+
+	CustomInitialSettings          func([]Setting) []Setting
+	CustomInitialTransportConnFlow func(uint32) uint32
+	CustomFirstHeadersFrameParam   func(HeadersFrameParam) HeadersFrameParam
+	CustomHeaders                  func([][2]string) [][2]string
 }
 
 func (t *Transport) maxHeaderListSize() uint32 {
@@ -808,9 +813,16 @@ func (t *Transport) newClientConn(c net.Conn, singleUse bool) (*ClientConn, erro
 		initialSettings = append(initialSettings, Setting{ID: SettingHeaderTableSize, Val: maxHeaderTableSize})
 	}
 
+	if t.CustomInitialSettings != nil {
+		initialSettings = t.CustomInitialSettings(initialSettings)
+	}
 	cc.bw.Write(clientPreface)
 	cc.fr.WriteSettings(initialSettings...)
-	cc.fr.WriteWindowUpdate(0, transportDefaultConnFlow)
+	if t.CustomInitialTransportConnFlow != nil {
+		cc.fr.WriteWindowUpdate(0, t.CustomInitialTransportConnFlow(transportDefaultConnFlow))
+	} else {
+		cc.fr.WriteWindowUpdate(0, transportDefaultConnFlow)
+	}
 	cc.inflow.add(transportDefaultConnFlow + initialWindowSize)
 	cc.bw.Flush()
 	if cc.werr != nil {
@@ -1607,12 +1619,21 @@ func (cc *ClientConn) writeHeaders(streamID uint32, endStream bool, maxFrameSize
 		hdrs = hdrs[len(chunk):]
 		endHeaders := len(hdrs) == 0
 		if first {
-			cc.fr.WriteHeaders(HeadersFrameParam{
-				StreamID:      streamID,
-				BlockFragment: chunk,
-				EndStream:     endStream,
-				EndHeaders:    endHeaders,
-			})
+			if cc.t.CustomFirstHeadersFrameParam != nil {
+				cc.fr.WriteHeaders(cc.t.CustomFirstHeadersFrameParam(HeadersFrameParam{
+					StreamID:      streamID,
+					BlockFragment: chunk,
+					EndStream:     endStream,
+					EndHeaders:    endHeaders,
+				}))
+			} else {
+				cc.fr.WriteHeaders(HeadersFrameParam{
+					StreamID:      streamID,
+					BlockFragment: chunk,
+					EndStream:     endStream,
+					EndHeaders:    endHeaders,
+				})
+			}
 			first = false
 		} else {
 			cc.fr.WriteContinuation(streamID, endHeaders, chunk)
@@ -1974,7 +1995,9 @@ func (cc *ClientConn) encodeHeaders(req *http.Request, addGzipHeader bool, trail
 	// separate pass before encoding the headers to prevent
 	// modifying the hpack state.
 	hlSize := uint64(0)
+	var headers [][2]string
 	enumerateHeaders(func(name, value string) {
+		headers = append(headers, [2]string{name, value})
 		hf := hpack.HeaderField{Name: name, Value: value}
 		hlSize += uint64(hf.Size())
 	})
@@ -1987,18 +2010,22 @@ func (cc *ClientConn) encodeHeaders(req *http.Request, addGzipHeader bool, trail
 	traceHeaders := traceHasWroteHeaderField(trace)
 
 	// Header list size is ok. Write the headers.
-	enumerateHeaders(func(name, value string) {
+	if cc.t.CustomHeaders != nil {
+		headers = cc.t.CustomHeaders(headers)
+	}
+	for i := range headers {
+		name, value := headers[i][0], headers[i][1]
 		name, ascii := lowerHeader(name)
 		if !ascii {
 			// Skip writing invalid headers. Per RFC 7540, Section 8.1.2, header
 			// field names have to be ASCII characters (just as in HTTP/1.x).
-			return
+			break
 		}
 		cc.writeHeader(name, value)
 		if traceHeaders {
 			traceWroteHeaderField(trace, name, value)
 		}
-	})
+	}
 
 	return cc.hbuf.Bytes(), nil
 }
